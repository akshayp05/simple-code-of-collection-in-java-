HashSet():-
 -HashSet stores the elements by using a mechanism called hashing.
-HashSet does not maintain any order
-HashSet contain unique element only
-HashSet allow null value
-HashSet doesn't maintain the insertion order
-HashSet class is non-synchronized
-HashSet is the best for search operations
-The initial capacity of HashSet is 16, and the load factor is 0.75
Example:-
import java.util.HashSet;

public class HashSetDemo {
	public static void main(String[] args) {
		
	
	HashSet hs=new HashSet<>();
	hs.add(12);
         hs.add(12);
	hs.add(12);
	hs.add(13);
	hs.add("king");
	hs.add("ram");
	System.out.println(hs);
	System.out.println(hs.hashCode());
	System.out.println(hs.getClass());
	System.out.println(hs.contains(13));
}
}
..................out put
[king, 12, 13, ram]      ............Duplicate not allow
3404750
class java.util.HashSet
true
======================================================================================================================================================....
Example:-2)
import java.util.HashSet;
import java.util.Iterator;

class Book{
	int id;
	String auther,publisher;
	int Qty;
	
	public Book(int id,String auther,String publisher,int Qty) {
		this.id=id;
		this.auther=auther;
		this.publisher=publisher;
		this.Qty=Qty;
	}
	public String toString() {
		return id +" "+ auther+" " +  publisher+" " + Qty;
	}
	}
public class HashSetTest {
	public static void main(String[] args) {
		HashSet<Book> set=new HashSet<Book>();
		Book b=new Book(12, "Raj", "dharma", 100);
		Book b1=new Book(13, "Ram", "karma", 200);
		Book b2=new Book(14, "Rahul", "warma", 300);
		set.add(b);
		set.add(b1);
		set.add(b2);
		    Iterator<Book> itr=set.iterator();
		    while (itr.hasNext()) {
				Book book =  itr.next();
				System.out.println(book);
				}
		    }}
